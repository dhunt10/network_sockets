from socket import AF_INET, SOCK_STREAM, socket


def configure_client():
    """
    This function creates the socket and connects to the server and sends the initial hello message with the
    necessary information. The run_client function is then called, passing in the socket object.
    :return: What is returned from the run_client, which is the secret flag generated by the server.
    """
    client_connect = socket(AF_INET, SOCK_STREAM)
    client_connect.connect(CONNECTION)

    hello_message = "ece2540 HELLO 001691344"
    client_connect.send(hello_message.encode())
    return run_client(client_connect)


def run_client(client_connect):
    """
    This function runs a for while loop that continuously receives and sends messages
    to the server. As long as the format of the message is
    class status first_number operator second_number then the try will pass and the client will continue to send
    and receive messages from the server. The string will be broken into a list of strings delimited by a space
    and the first and second number are acted upon based on what the operator is, controlled by an if statement.
    The second the format of the message received changes that means the server has sent the secret flag and the try
    will fail with a value error and then we search for the secret flag instead of the previous parameters.
    The secret flag will then be extracted and returned.
    :param client_connect: the socket that has been created in configure_client.
    :return: the secret flag
    """

    while True:
        server_resp = client_connect.recv(2048).decode("utf8");
        results = server_resp.split()

        try:
            first_number = int(results[2])
            op = results[3]
            second_number = int(results[4])
            if op == '-':
                number_message = first_number - second_number
            elif op == '+':
                number_message = first_number + second_number
            elif op == '/':
                number_message = first_number / second_number
            else:
                number_message = first_number * second_number

            client_connect.send((str(number_message).encode()))

        except ValueError:
            secret_flag = results[2]
            client_connect.close()
            break;

    return secret_flag


if __name__ == '__main__':
    HOST = '129.10.33.207'
    PORT = 12005
    CONNECTION = (HOST, PORT)
    print(configure_client())
